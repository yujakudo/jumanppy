#!/bin/bash
set -e

IS_WIN=false
DIFF=diff
# if MinGW
if [ "$COMSPEC" != "" ]; then
	IS_WIN=true
	DIFF=/b/bin/diff
fi

# JUMAN++ Apache 2.0
JUMANPP_URL=http://lotus.kuee.kyoto-u.ac.jp/nl-resource/jumanpp/jumanpp-1.02.tar.xz
# Boost C++ Library
BOOSTLIB_URL=https://dl.bintray.com/boostorg/release/1.65.1/source/boost_1_65_1.zip
DOWNLOADS="$JUMANPP_URL $BOOSTLIB_URL"

# Environment
THIS_DIR=cexe
THIS_ABS=$PWD

JUMANPP=jumanpp-1.02
ARCHIVE=${JUMANPP}.tar.xz
PACKAGE=${JUMANPP}
ARCHIVE_DIR=archives

TEST_DIR=test
TEST_EXE=./test.sh

PACKAGE_DIR=${PACKAGE}
PATCH_FILE=${ARCHIVE_DIR}/ext_${PACKAGE}_01.patch
DIST_NAME=${JUMANPP}_ext
DIST_DIR=dist

PREFIX=${PWD}/${DIST_DIR}/${DIST_NAME}
INCLUDE_DIR=${THIS_ABS}/local/include
CPPFLAGS="-I${INCLUDE_DIR}"

if $IS_WIN; then
	# For Windows. (MinGW)
	# PREFIX=
	LDFLAGS="--static -static-libgcc -static-libstdc++"
	LIBS="-lwinpthread"
	INCLUDE_DIR=${THIS_ABS}/local_win/include
	CPPFLAGS="-I${INCLUDE_DIR}"
else
	# For POSIX systems
	#PREFIX="$HOME/local"
	PREFIX=${PREFIX}_$(uname)
	CPPFLAGS="${CPPFLAGS} -Ofast -march=native -funroll-loops -ffast-math"
	LDFLAGS=
	LIBS=
fi

# configure to install.
# @param dist_dir for prefix
# @param flags for CPPFLAGS
function build_all() {
	cd $PACKAGE_DIR
	if $IS_WIN; then
		mkdir -p $1
		rm -rf $1/*
		echo ./configure --prefix=$1 --bindir=$1 \
			LDFLAGS="${LDFLAGS}" LIBS="${LIBS}" CPPFLAGS="$2" \
			CFLAGS="" CXXFLAGS=""
		./configure --prefix=$1 --bindir=$1 \
			LDFLAGS="${LDFLAGS}" LIBS="${LIBS}" CPPFLAGS="$2" \
			CFLAGS="" CXXFLAGS=""
		make clean all
		# make clean all install
		# cd lib
		# make libjuman.so
		# cd ..
	else
		echo ./configure --prefix=$1 \
			LDFLAGS="${LDFLAGS}" LIBS="${LIBS}" CPPFLAGS="$2" \
			CFLAGS="" CXXFLAGS=""
		./configure --prefix=$1 \
			LDFLAGS="${LDFLAGS}" LIBS="${LIBS}" CPPFLAGS="$2" \
			CFLAGS="" CXXFLAGS=""
		make clean all install
	fi
	cd ..
}

# Align distribute director for Windows
# @param prefix
function align() {
	if $IS_WIN; then
		curdir=$PWD
		cd $1
		mv share/jumanpp ./dics
		rm -rf share
		cp ${curdir}/${PACKAGE_DIR}/jumanpp-manual.pdf .
		cp ${curdir}/jumanpprc .
		cd $curdir
	fi
}

echo ${JUMANPP}_EXT

for cmd in $*; do

if [ $cmd = "load" ]; then
	mkdir -p local_win/include
	unzip ${ARCHIVE_DIR}/boost-1_65_subset.zip -d local_win/include
	tar xf ${ARCHIVE_DIR}/${ARCHIVE}
	cd $PACKAGE_DIR
	patch -p1 < ../${PATCH_FILE}
	mkdir -p backup/dic
	mv jumanpp-resource/dic.* backup/dic
	rm -f ${PACKAGE_DIR}/dict-build/Makefile
	cp ${ARCHIVE_DIR}/Makefile.dict-build ${PACKAGE_DIR}/dict-build/Makefile
	cd ..

elif [ $cmd = "build" ]; then
	build_all $PREFIX "${CPPFLAGS}"

elif [ $cmd = "build-w64" ]; then
	n_dist=${PREFIX}_win64
	build_all ${n_dist} "${CPPFLAGS} -m64 -Ofast"
	align ${n_dist}

elif [ $cmd = "build-w32" ]; then
	n_dist=${PREFIX}_win32
	build_all ${n_dist} "${CPPFLAGS} -m32 -Ofast"
	align ${n_dist}

# For develop
elif [ $cmd = "download" ]; then
	cd $ARCHIVE_DIR
	for download in $DOWNLOADS ; do
#		if [ ! -e basename $download ]; then
			wget $download
#		fi
	done
	cd ..

elif [ $cmd = "build-debug" ]; then
	n_dist=${PREFIX}_debug
	build_all ${n_dist} "${CPPFLAGS} -g -O0"
	align ${n_dist}

elif [ $cmd = "diff" ]; then
	diff_opt="-rupBN -x *dic -x perl -x stamp-h1 -x winconf -x jumanrc -x libtool -x .libs -x .deps -x config.* -x *.log -x *.o -x *.lo -x *.a -x *.la -x *.so -x *.exe -x Makefile"
	fromdir=/tmp/${PACKAGE_DIR}/src
	todir=${PACKAGE_DIR}/src
	$DIFF ${diff_opt} ${fromdir} ${todir} > ${PATCH_FILE}

elif [ $cmd = "test" ]; then
	if $IS_WIN; then
		cd $TEST_DIR
		$TEST_EXE ../dist/juman-7.01_ext_win64/juman.exe
		$TEST_EXE ../dist/juman-7.01_ext_win32/juman.exe
		cd ..
	else
		cd $TEST_DIR
		$TEST_EXE ${PREFIX}/bin/juman
		cd ..
	fi

elif [ $cmd = "clean-dist" ]; then
	rm -rf ${DIST_DIR}/*

elif [ $cmd = "zip" ]; then
	cp copyings/copying.exe.txt ${DIST_DIR}/${DIST_NAME}_win64/copying.txt
	cp copyings/copying.exe.txt ${DIST_DIR}/${DIST_NAME}_win32/copying.txt
	cd ${DIST_DIR}
	zip -r ${DIST_NAME}-${MODULE_VERSION}_win64.zip ${DIST_NAME}_win64
	zip -r ${DIST_NAME}-${MODULE_VERSION}_win32.zip ${DIST_NAME}_win32
	cd ..

elif [ $cmd = "git-push" ]; then
	cd ..
	git push origin master
	cd THIS_DIR
elif [ $cmd = "git-tag" ]; then
	cd ..
	echo -n "Comment: "
	read comm
	git tag -a $V_VERSION -m "${comm}"
	git push origin $V_VERSION
	cd THIS_DIR

else
	echo "Unknown command:" $cmd
	break
fi

done
